// veracode-sca-demo.js
// This file contains intentionally vulnerable code for Veracode SCA testing

// 1. Vulnerable jQuery 1.6.2 methods (CVE-2011-4969)
function demonstrateJqueryVulnerabilities() {
    // Load vulnerable jQuery version
    const jqueryScript = document.createElement('script');
    jqueryScript.src = 'https://code.jquery.com/jquery-1.6.2.min.js';
    document.head.appendChild(jqueryScript);
    
    jqueryScript.onload = function() {
        // XSS via .html() method
        const userInput = "<img src=x onerror=alert('XSS via jQuery.html()')>";
        $('#jquery-html-demo').html(userInput);
        
        // XSS via .attr() method
        $('#jquery-attr-demo').attr('href', 'javascript:alert("XSS via jQuery.attr()")');
        
        console.log("jQuery 1.6.2 vulnerabilities demonstrated");
    };
}

// 2. Vulnerable Lodash 4.17.4 methods (CVE-2018-3721, CVE-2021-23337)
function demonstrateLodashVulnerabilities() {
    // Load vulnerable lodash version
    const lodashScript = document.createElement('script');
    lodashScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.4/lodash.min.js';
    document.head.appendChild(lodashScript);
    
    lodashScript.onload = function() {
        // Prototype pollution via _.merge()
        const maliciousPayload = '{"__proto__":{"veracodePolluted":true}}';
        const obj = {};
        _.merge(obj, JSON.parse(maliciousPayload));
        
        if({}.veracodePolluted === true) {
            console.log("Lodash prototype pollution successful via _.merge()");
        }
        
        // Potential RCE via _.template()
        try {
            const userInput = "<%= process.mainModule.require('child_process').execSync('whoami').toString() %>";
            const compiled = _.template('Hello ' + userInput);
            console.log("Lodash template compiled (simulated RCE)");
        } catch(e) {
            console.log("Lodash template error (expected in browser):", e.message);
        }
    };
}

// 3. Vulnerable AngularJS 1.4.9 methods (CVE-2015-9251)
function demonstrateAngularVulnerabilities() {
    // Load vulnerable AngularJS version
    const angularScript = document.createElement('script');
    angularScript.src = 'https://ajax.googleapis.com/ajax/libs/angularjs/1.4.9/angular.min.js';
    document.head.appendChild(angularScript);
    
    angularScript.onload = function() {
        angular.module('vulnApp', [])
        .controller('VulnController', ['$scope', function($scope) {
            // Client-side template injection
            $scope.userControlled = '{{constructor.constructor("alert(\"XSS via AngularJS\")")()}}';
            
            // Bypass sanitization
            $scope.unsafeHtml = '<script>alert("XSS")<\/script>';
        }]);
        
        console.log("AngularJS 1.4.9 vulnerabilities demonstrated");
    };
}

// 4. Vulnerable ExpressJS 4.16.0 (simulated - would need Node.js environment)
function demonstrateExpressVulnerabilities() {
    // This would be detected in a Node.js environment
    console.log("ExpressJS vulnerabilities would be detected in server-side scanning");
    /*
    const express = require('express');
    const app = express();
    
    // Simulated vulnerable middleware configuration
    app.disable('x-powered-by'); // Missing security headers
    
    // Simulated vulnerable route
    app.get('/search', (req, res) => {
        // SQL injection vulnerability
        const query = "SELECT * FROM users WHERE id = " + req.query.id;
        
        // XSS vulnerability
        res.send('<div>Results for: ' + req.query.q + '</div>');
    });
    */
}

// Execute all demonstrations when the page loads
window.onload = function() {
    console.log("Starting Veracode SCA vulnerability demonstrations...");
    
    // Create demo elements in the DOM
    document.body.innerHTML += `
        <div id="jquery-html-demo"></div>
        <a id="jquery-attr-demo" href="#">Test jQuery.attr()</a>
        <div ng-app="vulnApp" ng-controller="VulnController">
            <div ng-bind="userControlled"></div>
            <div ng-bind-html="unsafeHtml"></div>
        </div>
    `;
    
    demonstrateJqueryVulnerabilities();
    demonstrateLodashVulnerabilities();
    demonstrateAngularVulnerabilities();
    demonstrateExpressVulnerabilities();
    
    console.log("Veracode SCA vulnerability demonstrations complete");
};